/*

This component demonstrates the use of promises using async/await calls. Promises are getting generated by the setTimeOut function.
A boy needs to complete a race from the start to end, but he tends to sleep when he is tired. When the boy runs, continious async run calls are made for 2 seconds.
When he wants to sleep, he will sleep for 5 seconds and then again start running till he reaches the finish line.

*/

import React, {useState} from "react";
import { useEffect } from "react";
import '../css/Progress.css';
import ProgressBar from 'react-bootstrap/ProgressBar';
import boyRunning from '../assets/runningBoy.jpg';
import Navbar from "./Navbar";


const Progress = () => {

  const [progress, setProgress] = useState(0); //percentage of progress made.
  const [activity, setActivity] = useState('not_started'); // what action the boy is doing.
  const [marginLeft, setMarginLeft] = useState(0); // Initial margin-left value for the image (margin to make an illusion of the image moving accross the screen)

  
  //Does the actions based on which state the boy is in.
  useEffect(() => {
    const runOrSleep = async () => {
      if (activity === 'running') {
            await run();
      }
      else if (activity === 'sleeping') {
            await sleep();
      }
    };

    if (progress < 100) {
      runOrSleep();
    } else if (progress >= 100 && activity === 'running') {
      setActivity('finished_running');
      setMarginLeft(1100);
    }
  }, [progress, activity]);

  //Run method returns a promise after 2 secs and after 2 secs, updates the progress and margin to move the image.
  const run = () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        if (progress < 100) {
          setProgress((prevProgress) => prevProgress + 5);
          setMarginLeft((prevMarginLeft) => prevMarginLeft + 50); // Increase margin-left to simulate running
          resolve(console.log("I just RAN!"));
        }
      }, 2000);
    });
  };

  //Sleep method returns a promise after 5 seconds and does not do any progress in that time.
  const sleep = () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        setActivity('running'); // Wake up after sleeping
        resolve(console.log("I only sleep for 5 seconds!"));
      }, 5000); // Simulate sleeping for 2 seconds
    });
  };

  
    return(
        <>
        <Navbar/>
      <h1 className="textHeader">Boy's Activity Progress</h1>
      <div className="container mt-5">
      <div className="text-start">
        <img src={boyRunning} alt="Boy Running" style={{ width: '150px', height:'200px',marginLeft: `${marginLeft}px` }} />
      </div>
      <div className="mt-4">
        <ProgressBar now={progress} label={`${progress}%`} />
      </div>
      <div className="text-center mt-3 button-holder">
        <button className="btn btn-primary mr-2 progressButton" onClick={() => setActivity('running')}>
          Start Running
        </button>
        <button className="btn btn-warning progressButton" onClick={() => setActivity('sleeping')}>
          Start Sleeping
        </button>
        <button className="btn btn-danger progressButton" onClick={() => {setActivity('not_started'); console.log("Finished Marathon, resetting!"); setMarginLeft(0); setProgress(0);}}>
          Reset Race
        </button>
      </div>
    </div>
        </>
    )
}

export default Progress;